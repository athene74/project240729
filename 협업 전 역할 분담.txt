1. 파이참에서 데이터 수집 => 오라클에 데이터 베이스에 넣고.
	최대 15분 전 데이터를 5분 단위로 나타냄 => 20분에 확인해보자.

2. 스케줄러 변동차트 ? 

한 시간 데이터를 한번에 받아서 처리?

기준일 넣으면 288개 데이터가 나오고, 이를 시간 기준으로 3초

시간의 순서에 따라 3초마다 순회하며 파이차트로 보여주는


최종 결과물이 주피터



오늘 치 데이터를 자동으로 받아 오라클에 넣는 작업

1. 데이터 수집 및 오라클 데이터베이스에 저장
팀원 1: 데이터 수집 및 저장

데이터 수집:

파이참(Pycharm)을 이용해 필요한 데이터를 수집합니다. 웹 크롤링, API 호출 또는 다른 방법을 사용할 수 있습니다.
데이터 수집 스크립트를 작성하고 테스트하여 데이터를 정확히 수집합니다.
데이터베이스에 저장:

오라클 데이터베이스에 연결하기 위한 설정을 진행합니다. 오라클의 파이썬 라이브러리인 cx_Oracle을 사용할 수 있습니다.
수집된 데이터를 오라클 데이터베이스에 삽입하는 스크립트를 작성합니다.
데이터를 주기적으로 저장하도록 스케줄러를 설정합니다. 이를 위해 cron이나 Windows Task Scheduler를 사용할 수 있습니다.
데이터 검증:

저장된 데이터의 정확성을 확인합니다. 데이터가 올바르게 저장되었는지 확인하고, 오류를 수정합니다.
2. 데이터 처리 및 시각화
팀원 2: 데이터 처리 및 시각화

데이터 추출 및 전처리:

오라클 데이터베이스에서 데이터를 추출합니다. SQL 쿼리를 사용하여 최대 15분 전의 데이터를 5분 단위로 가져옵니다.
데이터를 시간 기준으로 정렬하고 필요한 형식으로 변환합니다.
데이터 시각화:

Jupyter Notebook을 사용하여 데이터를 시각화합니다. 파이차트와 같은 차트를 생성하기 위해 matplotlib, seaborn, plotly 등의 라이브러리를 사용할 수 있습니다.
시각화는 3초 간격으로 업데이트되도록 설정합니다. 이를 위해 타이머를 설정하거나, 주기적으로 데이터를 업데이트하는 코드를 작성합니다.
스케줄러 및 자동화:

데이터를 자동으로 받아와 오라클에 저장하는 작업을 매일 수행할 수 있도록 스케줄러를 설정합니다.
이 작업을 자동화하여 하루 단위로 수행되도록 설정합니다.
변동 차트 작성:

수집된 데이터의 변동을 보여주는 차트를 작성합니다. 데이터를 시간 기준으로 분석하여 변동을 시각화합니다.
협업 및 커뮤니케이션
정기적인 미팅: 팀원들 간의 진행 상황을 공유하고 문제를 해결하기 위한 정기적인 미팅을 설정합니다.
문서화: 각 팀원은 자신의 작업을 문서화하여 나중에 쉽게 참고할 수 있도록 합니다.
코드 리뷰: 작성한 코드에 대해 서로 리뷰를 진행하여 품질을 높이고 버그를 최소화합니다.

데이터 추출 부분은 아직 오라클에 데이터가 없기 때문에, csv파일을 통해 분석을 먼저한다.
-csv 파일 만들기
하루 전의 데이터(288개)로 시작 - 시간의 흐름에 따른 차트의 변화를 시각화를 통해 나타낸다.
